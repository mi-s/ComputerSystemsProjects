(1)
A.
ttttttttssbb

B.
                                        *      *
_Op._|_Addr.____Tag____Set____Offset_|_H/M_|_Value___|Cache Change
Read | 0x833 => 0x83 + 00(0) + 11(3) | Hit | D0      |None
Read | 0x00A => 0x00 + 10(2) + 10(2) | Hit | 4A	     |None
Read | 0x006 => 0x00 + 01(1) + 10(2) | Hit | 46      |None
Read | 0xFFE => 0xFF + 11(3) + 11(3) | Hit | FF      |None
Read | 0x54D => 0x54 + 11(3) + 10(2) | Miss| Unknown |Writes block to set:3, tag:54 and sets valid bit
Write| 0x54E => 0x54 + 11(3) + 11(3) | Hit | n/a     |Rewrites block at set:3, tag:54 with new memory block
Write| 0x007 => 0x00 + 01(1) + 11(3) | Hit | n/a     |Rewrites block at set:1, tag:00 with new memory block
Read | 0x44C => 0x44 + 11(3) + 01(1) | Miss| Unknown |Rewrites block at set:3, tag:FF with tag:44 and new memory block
Read | 0xFFE => 0xFF + 11(3) + 11(3) | Miss| Unknown |Rewrites block at set:3, tag:54 with tag:FF and new memory block

(2)
A. 
The miss rate will be 1.  Because the array is twice as large as the cache, and the loop alternates
between accessing elements from the two rows, the cache will write a new block with each reference to 
the array.

B.
The miss rate will be 1/4.  Since the array now fits within the cache, the array elements from different
rows will map to different sets, so there will only be compulsory misses, which occur every four integers.

C.
The miss rate will be 1/4.  On the first and every fourth loop iteration after, a block from each of the rows will be written
to the same set.  Once half the loop is complete, all the sets are filled, so the cache begins rewriting sets starting from set 0.

D.
Increasing the cache size will not reduce the miss rate.  With a block size that fits 4 integers, the minimum miss rate is 1/4 
for an empty cache in this context.  This is because it will need to write a new block every 4 integers and each write occurs with a miss.

E.
Increasing the block size will reduce the miss rate.  Since the columns are being referenced in a stride-1 reference pattern within the rows,
and since the 2-way set associativity prevents thrashing between the rows, increasing the block size will decrease the miss rate because it
decreases the interval the cache must write new blocks without adding any conflict misses.

(3)
A. 
Average Latency = (FLD + FST)(R * H + (1 - R) * M) + (FBJ * LBJ) + ((1 - FLD - FST - FBJ) * LAL)

B.
(.22 + .12)(.6 * 1 + (1 - .6) * 120) + (.2 * 3) + ((1 - .22 - .12 - .2) * 1.1)
= (.34)(.6 + .4 * 120) + .6 + (.46 * 1.1)
= (.34)(.6 + 48) + .6 + .506
= 17.63 
=> 18 cycles