(1)
A.
It corresponds to line 4 in the C expression.
In the assembly, line 4 stores the value of *pb in %rcx.  Then, it the value stored in %rcx is
added to the current array element in line 5.

B.
It is possible that pb is the address of one of the elements in arr.  If this is the case,
the program will behave correctly until the loop reaches that element.  If there are any elements
after that element in the array, an incorrect amount will be added to those elements.
This is because the value of *pb has doubled, but this would not be reflected in future sums
since mov (%rsi), %rcx took place before the loop.

C.
Memory aliasing

D.
1 void addto(long *arr, long *pb, long n) {
2   long i;
3   long addend = *pb;
4   for (i = 0; i < n; i++) {
5     arr[i] += addend;
6   }
7 }